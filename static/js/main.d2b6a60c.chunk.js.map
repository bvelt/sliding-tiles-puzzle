{"version":3,"sources":["logo.svg","logic/Settings.js","components/Tile.js","components/TileGrid.js","logic/States.js","logic/Search.js","logic/Action.js","logic/Reducer.js","logic/Successor.js","logic/Problem.js","logic/Shuffle.js","components/IconButton.js","components/TileGridPreview.js","components/ActionSequence.js","components/Solution.js","containers/SlidingTileGrid.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Settings","columnCount","arguments","length","undefined","DEFAULT_SIZE","rowCount","Object","classCallCheck","this","blankSpace","defaultSettings","noop","Tile","_this$props","props","_this$props$value","value","_this$props$isBlank","isBlank","_this$props$isClickab","isClickable","_this$props$onClick","onClick","react","className","concat","React","TileGrid","tiles","_this$props$moves","moves","_this$props$onMove","onMove","blankTile","rows","irow","cols","_loop","icol","itile","tileIsMoveable","some","move","toIndex","push","react_default","a","createElement","key","src_components_Tile","Component","stateEquals","b","i","States","states","state","contains","unshift","isEmpty","Error","shift","findIndex","existing","Stats","nodeCount","expansionCount","createClass","toFixed","Heuristic","settings","fromIndex","positions","Math","abs","floor","goal","distance","goalIndex","stateIndex","indexOf","cityBlockDistance","pathCostComparator","pathCost","AStar","problem","heuristic","closed","stats","nodes","initialState","depth","estimatedPathCost","goalState","hasNext","parent","action","node","index","other","prev","splice","addLast","incrementExpansionCount","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","successor","successors","Symbol","iterator","next","done","_ref15","_ref14","slicedToArray","child","createNode","prevIndex","retainBest","incrementNodeCount","err","return","sort","Search","strategy","solution","init","goalTest","expand","actionTypes","ActionFactory","type","Reducer","moveTiles","movedTiles","Array","from","Successor","actionFactory","reducer","fromRow","fromCol","actions","blankUp","blankRight","blankDown","blankLeft","_this","map","reduce","Problem","createTiles","Shuffle","random","randomSucc","succ","randomIndex","addLastIfAbsent","times","randomSuccessor","IconButton","icon","_this$props$isDisable","isDisabled","style","backgroundImage","title","disabled","ICONS","TileGridPreview","_this$props$settings","j","row","ActionSequence","possibleConstructorReturn","getPrototypeOf","call","handleBack","bind","assertThisInitialized","handleForward","_this$state$index","setState","assign","_this$state$index2","_this$props$actions","TileGridPreview_TileGridPreview","src_components_IconButton","Solution","actionSequence","_this$props$solved","solved","_this$props$solution","_this$props$stats","ActionSequence_ActionSequence","branchingFactor","SlidingTileGrid","handleMove","handleRandom","handleSearch","handleReset","shuffle","nextMoves","prevMoves","_this2","prevState","search","_this3","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_ref","_ref2","nextTiles","_iterator","_this4","_this$state","shuffled","randomMoves","_this5","history","_this$state2","_this$state2$solved","_this$state2$search","Solution_Solution","src_components_TileGrid","App","src_containers_SlidingTileGrid","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2IAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,+QCA3BC,EAGX,SAAAA,IAAyE,IAA7DC,EAA6DC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAA/CF,EAASK,aAAcC,EAAwBJ,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAbD,EAAaM,OAAAC,EAAA,EAAAD,CAAAE,KAAAT,GACvES,KAAKR,YAAcA,EACnBQ,KAAKH,SAAWA,EAChBG,KAAKC,WAAaJ,EAAWL,GANpBD,EACJK,aAAe,EASjB,IAAMM,EAAkB,IAAIX,4CCN7BY,SAAO,cAwBEC,mLAfJ,IAAAC,EAMHL,KAAKM,MANFC,EAAAF,EAELG,aAFK,IAAAD,GAEI,EAFJA,EAAAE,EAAAJ,EAGLK,eAHK,IAAAD,KAAAE,EAAAN,EAILO,mBAJK,IAAAD,KAAAE,EAAAR,EAKLS,eALK,IAAAD,EAKKV,EALLU,EAOP,OACEE,EAAA,sBACEC,UAAS,QAAAC,OAAUL,EAAc,kBAAoB,GAA5C,KAAAK,OAAkDP,EAAU,cAAgB,IACrFI,QAASF,EAAcE,EAAUX,GAAQK,UAjB9BU,aCiDJC,0LA9BX,IAZO,IAAAd,EAOHL,KAAKM,MALPd,EAFKa,EAELb,YACAK,EAHKQ,EAGLR,SACAuB,EAJKf,EAILe,MAJKC,EAAAhB,EAKLiB,aALK,IAAAD,EAKG,GALHA,EAAAE,EAAAlB,EAMLmB,cANK,IAAAD,EAMI,aANJA,EASDE,EAAYjC,EAAcK,EAE1B6B,EAAO,GACJC,EAAO,EAAGA,EAAO9B,EAAU8B,IAAQ,CAE1C,IADA,IAAMC,EAAO,GAD6BC,EAAA,SAEjCC,GACP,IAAMC,EAASJ,EAAO9B,EAAYiC,EAC5BE,EAAiBV,EAAMW,KAAK,SAAAC,GAAI,OAAIA,EAAK,GAAGC,UAAYJ,IAC9DH,EAAKQ,KACHC,EAAAC,EAAAC,cAAA,MAAIC,IAAKT,GACPM,EAAAC,EAAAC,cAACE,EAAD,CACEjC,MAAOY,EAAMW,GACbrB,QAASU,EAAMW,KAAWN,EAC1Bb,YAAaoB,EACblB,QAASkB,EAAiB,kBAAMR,EAAOO,IAAS,kBAT/CD,EAAO,EAAGA,EAAOtC,EAAasC,IAAQD,EAAtCC,GAaTJ,EAAKU,KACHC,EAAAC,EAAAC,cAAA,MAAIC,IAAKb,GAAOC,IAIpB,OACES,EAAAC,EAAAC,cAAA,SAAOvB,UAAU,YACfqB,EAAAC,EAAAC,cAAA,aACGb,WA3CYR,IAAMwB,YCJtB,SAASC,EAAYL,EAAGM,GAC7B,GAAIN,EAAE5C,SAAWkD,EAAElD,OACjB,OAAO,EAET,IAAK,IAAImD,EAAI,EAAGA,EAAIP,EAAE5C,OAAQmD,IAC5B,GAAMP,EAAEO,KAAOD,EAAEC,GACf,OAAO,EAGX,OAAO,MAGYC,aACnB,SAAAA,IAAyB,IAAbC,EAAatD,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAJ,GAAIK,OAAAC,EAAA,EAAAD,CAAAE,KAAA8C,GACvB9C,KAAK+C,OAASA,sDAGRC,GAEN,OADAhD,KAAK+C,OAAOX,KAAKY,IACV,0CAGOA,GACd,OAAIhD,KAAKiD,SAASD,KAGlBhD,KAAK+C,OAAOX,KAAKY,IACV,oCAGAA,GAEP,OADAhD,KAAK+C,OAAOG,QAAQF,IACb,2CAGQA,GACf,OAAIhD,KAAKiD,SAASD,KAGlBhD,KAAK+C,OAAOG,QAAQF,IACb,yCAIP,GAAIhD,KAAKmD,UACP,MAAM,IAAIC,MAAM,uBAElB,OAAOpD,KAAK+C,OAAOM,0CAInB,OAA8B,IAAvBrD,KAAK+C,OAAOrD,sCAInB,OAAOM,KAAK+C,OAAOrD,yCAGXsD,GACR,OAAOhD,KAAK+C,OAAOO,UAAU,SAAAC,GAAQ,OAAIZ,EAAYK,EAAOO,sCAGrDP,GACP,OAAOhD,KAAK+C,OAAOd,KAAK,SAAAsB,GAAQ,OAAIZ,EAAYK,EAAOO,cC7D9CC,EAAb,WACE,SAAAA,IAAe1D,OAAAC,EAAA,EAAAD,CAAAE,KAAAwD,GACbxD,KAAKyD,UAAY,EACjBzD,KAAK0D,eAAiB,EAH1B,OAAA5D,OAAA6D,EAAA,EAAA7D,CAAA0D,EAAA,EAAAhB,IAAA,qBAAAhC,MAAA,WAMIR,KAAKyD,cANT,CAAAjB,IAAA,0BAAAhC,MAAA,WASIR,KAAK0D,mBATT,CAAAlB,IAAA,kBAAAhC,MAAA,WAYI,OAAQR,KAAKyD,UAAYzD,KAAK0D,gBAAgBE,QAAQ,OAZ1DJ,EAAA,GAwJaK,EAAb,WACE,SAAAA,IAAwC,IAA5BC,EAA4BrE,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAjBS,EAAiBJ,OAAAC,EAAA,EAAAD,CAAAE,KAAA6D,GACtC7D,KAAK8D,SAAWA,EAFpB,OAAAhE,OAAA6D,EAAA,EAAA7D,CAAA+D,EAAA,EAAArB,IAAA,oBAAAhC,MAAA,SAKoBuD,EAAW5B,GAC3B,IAAM6B,EAAYC,KAAKC,IAAIH,EAAY5B,GAGvC,OAFiB8B,KAAKE,MAAMH,EAAYhE,KAAK8D,SAAStE,aACnCwE,EAAYhE,KAAK8D,SAAStE,cARjD,CAAAgD,IAAA,oBAAAhC,MAAA,SAYoBwC,EAAOoB,GAEvB,IADA,IAAIC,EAAW,EACNC,EAAY,EAAGA,EAAYF,EAAK1E,OAAQ4E,IAAa,CAC5D,IAAMC,EAAavB,EAAMwB,QAAQJ,EAAKE,IACtCD,GAAYrE,KAAKyE,kBAAkBF,EAAYD,GAEjD,OAAOD,MAlBXR,EAAA,GAsBO,SAASa,EAAmBpC,EAAGM,GACpC,OAAIN,EAAEqC,SAAW/B,EAAE+B,UACT,EAENrC,EAAEqC,SAAW/B,EAAE+B,SACV,EAEF,EAGF,IA8CMC,EAAb,oBAAAA,IAAA9E,OAAAC,EAAA,EAAAD,CAAAE,KAAA4E,GAAA,OAAA9E,OAAA6D,EAAA,EAAA7D,CAAA8E,EAAA,EAAApC,IAAA,OAAAhC,MAAA,SACOqE,GACH7E,KAAK6E,QAAUA,EACf7E,KAAK8E,UAAY,IAAIjB,EAAUgB,EAAQf,UACvC9D,KAAK+E,OAAS,IAAIjC,EAClB9C,KAAKgF,MAAQ,IAAIxB,EACjBxD,KAAKiF,MAAQ,CAAC,CACZjC,MAAO6B,EAAQK,aACfC,MAAO,EACPR,SAAU3E,KAAK8E,UAAUM,kBAAkBP,EAAQK,aAAcL,EAAQQ,eAT/E,CAAA7C,IAAA,UAAAhC,MAAA,WAcI,OAAOR,KAAKiF,MAAMvF,OAAS,IAd/B,CAAA8C,IAAA,OAAAhC,MAAA,WAkBI,IAAKR,KAAKsF,UACR,MAAM,IAAIlC,MAAM,gCAElB,OAAOpD,KAAKiF,MAAM5B,UArBtB,CAAAb,IAAA,aAAAhC,MAAA,SAwBa+E,EAAQvC,EAAOwC,EAAQL,GAChC,MAAO,CACLI,OAAQA,EACRvC,MAAOA,EACPwC,OAAQA,EACRL,MAAOA,EACPR,SAAUQ,EAAQnF,KAAK8E,UAAUM,kBAAkBpC,EAAOhD,KAAK6E,QAAQQ,cA9B7E,CAAA7C,IAAA,YAAAhC,MAAA,SAkCYwC,GACR,OAAOhD,KAAKiF,MAAM3B,UAAU,SAAAmC,GAAI,OAAI9C,EAAY8C,EAAKzC,MAAOA,OAnChE,CAAAR,IAAA,aAAAhC,MAAA,SAsCakF,EAAOC,GAChB,IAAMC,EAAO5F,KAAKiF,MAAMS,GACpBC,EAAMR,MAAQS,EAAKT,OACrBnF,KAAKiF,MAAMY,OAAOH,EAAO,EAAGC,KAzClC,CAAAnD,IAAA,SAAAhC,MAAA,SA6CSiF,GACLzF,KAAK+E,OAAOe,QAAQL,EAAKzC,OACzBhD,KAAKgF,MAAMe,0BAFA,IAAAC,GAAA,EAAAC,GAAA,EAAAC,OAAAvG,EAAA,IAGX,QAAAwG,EAAAC,EAA4BpG,KAAK6E,QAAQwB,UAAUC,WAAWb,EAAKzC,OAAnEuD,OAAAC,cAAAR,GAAAG,EAAAC,EAAAK,QAAAC,MAAAV,GAAA,EAA2E,KAAAW,EAAAR,EAAA3F,MAAAoG,EAAA9G,OAAA+G,EAAA,EAAA/G,CAAA6G,EAAA,GAAjEnB,EAAiEoB,EAAA,GAAzD5D,EAAyD4D,EAAA,GACzE,IAAK5G,KAAK+E,OAAO9B,SAASD,GAAQ,CAChC,IAAM8D,EAAQ9G,KAAK+G,WAAWtB,EAAMzC,EAAOwC,EAAQC,EAAKN,MAAQ,GAC1D6B,EAAYhH,KAAKsD,UAAUN,IACd,IAAfgE,EACFhH,KAAKiH,WAAWD,EAAWF,IAG3B9G,KAAKgF,MAAMkC,qBACXlH,KAAKiF,MAAM7C,KAAK0E,MAZX,MAAAK,GAAAlB,GAAA,EAAAC,EAAAiB,EAAA,YAAAnB,GAAA,MAAAI,EAAAgB,QAAAhB,EAAAgB,SAAA,WAAAnB,EAAA,MAAAC,GAgBXlG,KAAKiF,MAAMoC,KAAK3C,OA7DpBE,EAAA,GAiEa0C,EAAb,WACE,SAAAA,EAAYzC,GAAiC,IAAxB0C,EAAwB9H,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAb,IAAImF,EAAS9E,OAAAC,EAAA,EAAAD,CAAAE,KAAAsH,GAC3CtH,KAAK6E,QAAUA,EACf7E,KAAKuH,SAAWA,EAChBvH,KAAKwH,SAAW,KAJpB,OAAA1H,OAAA6D,EAAA,EAAA7D,CAAAwH,EAAA,EAAA9E,IAAA,SAAAhC,MAAA,WAQI,IADAR,KAAKuH,SAASE,KAAKzH,KAAK6E,SACjB7E,KAAKuH,SAASjC,WAAW,CAC9B,IAAMG,EAAOzF,KAAKuH,SAASd,OAC3B,GAAIzG,KAAK6E,QAAQ6C,SAASjC,EAAKzC,OAE7B,OADAhD,KAAKwH,SAAW/B,GACT,EAETzF,KAAKuH,SAASI,OAAOlC,GAEvB,OAAO,MAhBX6B,EAAA,GC1SaM,EACD,WADCA,EAEE,cAFFA,EAGC,aAHDA,EAIC,aAGDC,EAAb,oBAAAA,IAAA/H,OAAAC,EAAA,EAAAD,CAAAE,KAAA6H,GAAA,OAAA/H,OAAA6D,EAAA,EAAA7D,CAAA+H,EAAA,EAAArF,IAAA,UAAAhC,MAAA,SACUuD,EAAW5B,GACjB,MAAO,CACL2F,KAAMF,EACN7D,UAAWA,EACX5B,QAASA,KALf,CAAAK,IAAA,aAAAhC,MAAA,SAQauD,EAAW5B,GACpB,MAAO,CACL2F,KAAMF,EACN7D,UAAWA,EACX5B,QAASA,KAZf,CAAAK,IAAA,YAAAhC,MAAA,SAeYuD,EAAW5B,GACnB,MAAO,CACL2F,KAAMF,EACN7D,UAAWA,EACX5B,QAASA,KAnBf,CAAAK,IAAA,YAAAhC,MAAA,SAsBYuD,EAAW5B,GACnB,MAAO,CACL2F,KAAMF,EACN7D,UAAWA,EACX5B,QAASA,OA1Bf0F,EAAA,GCLqBE,iGACZ3G,EAAOoE,GACZ,OAAQA,EAAOsC,MACb,KAAKF,EACL,KAAKA,EACL,KAAKA,EACL,KAAKA,EACH,OAAO5H,KAAKgI,UAAU5G,EAAOoE,EAAOzB,UAAWyB,EAAOrD,SACxD,QACE,OAAOf,qCAIHA,EAAO2C,EAAW5B,GAC1B,IAAM8F,EAAaC,MAAMC,KAAK/G,GAG9B,OAFA6G,EAAW9F,GAAWf,EAAM2C,GAC5BkE,EAAWlE,GAAa3C,EAAMe,GACvB8F,WCfUG,aACnB,SAAAA,IAAwC,IAA5BtE,EAA4BrE,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAjBS,EAAiBJ,OAAAC,EAAA,EAAAD,CAAAE,KAAAoI,GACtCpI,KAAK8D,SAAWA,EAChB9D,KAAKqI,cAAgB,IAAIR,EACzB7H,KAAKsI,QAAU,IAAIP,sDAGb3G,GACN,IAAM2C,EAAY3C,EAAMoD,QAAQxE,KAAK8D,SAAS7D,YAC9C,IAAmB,IAAf8D,EACF,MAAM,IAAIX,MAAJ,gCAAAnC,OAA0CG,IAElD,IAAMmH,EAAUtE,KAAKE,MAAMJ,EAAY/D,KAAK8D,SAAStE,aAC/CgJ,EAAUzE,EAAY/D,KAAK8D,SAAStE,YAEpCiJ,EAAU,GAChB,GAAIF,EAAU,EAAG,CACf,IAAMpG,EAAU4B,EAAY/D,KAAK8D,SAAStE,YAC1CiJ,EAAQrG,KAAKpC,KAAKqI,cAAcK,QAAQ3E,EAAW5B,IAErD,GAAIqG,EAAU,EAAIxI,KAAK8D,SAAStE,YAAa,CAC3C,IAAM2C,EAAU4B,EAAY,EAC5B0E,EAAQrG,KAAKpC,KAAKqI,cAAcM,WAAW5E,EAAW5B,IAExD,GAAIoG,EAAU,EAAIvI,KAAK8D,SAASjE,SAAU,CACxC,IAAMsC,EAAU4B,EAAY/D,KAAK8D,SAAStE,YAC1CiJ,EAAQrG,KAAKpC,KAAKqI,cAAcO,UAAU7E,EAAW5B,IAEvD,GAAIqG,EAAU,EAAG,CACf,IAAMrG,EAAU4B,EAAY,EAC5B0E,EAAQrG,KAAKpC,KAAKqI,cAAcQ,UAAU9E,EAAW5B,IAGvD,OAAOsG,qCAGErH,GAAO,IAAA0H,EAAA9I,KAChB,OAAOA,KAAKyI,QAAQrH,GAAO2H,IAAI,SAAAvD,GAAM,MACnC,CAACA,EAAQsD,EAAKR,QAAQU,OAAO5H,EAAOoE,eCvCrByD,aACnB,SAAAA,IAAwC,IAA5BnF,EAA4BrE,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAjBS,EAAiBJ,OAAAC,EAAA,EAAAD,CAAAE,KAAAiJ,GACtCjJ,KAAK8D,SAAWA,EAChB9D,KAAKqG,UAAY,IAAI+B,EAAUtE,GAC/B9D,KAAKqF,UAAYrF,KAAKkJ,cACtBlJ,KAAKkF,aAAelF,KAAKkJ,wEAKzB,IADA,IAAM9H,EAAQ,GACLyB,EAAI,EAAGA,EAAK7C,KAAK8D,SAASjE,SAAWG,KAAK8D,SAAStE,YAAcqD,IACxEzB,EAAMgB,KAAKS,EAAI,GAEjB,OAAOzB,mCAGAA,GACP,IAAK,IAAIyB,EAAI,EAAGA,EAAI7C,KAAKqF,UAAU3F,OAAQmD,IACzC,GAAIzB,EAAMyB,KAAO7C,KAAKqF,UAAUxC,GAC9B,OAAO,EAGX,OAAO,WCrBUsG,aACnB,SAAAA,IAAwC,IAA5BrF,EAA4BrE,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAjBS,EAAiBJ,OAAAC,EAAA,EAAAD,CAAAE,KAAAmJ,GACtCnJ,KAAK8D,SAAWA,EAChB9D,KAAKqG,UAAY,IAAI+B,EAAUtE,2DAGrBpE,GACV,OAAOuE,KAAKE,MAAMF,KAAKmF,SAAW1J,6CAGlB,IAAAoJ,EAAA9I,KACV+E,EAAS,IAAIjC,EACnB,OAAO,SAACE,GAGN,IAFA,IAAIqG,EACEC,EAAOR,EAAKzC,UAAUC,WAAWtD,GAChCsG,EAAK5J,OAAS,GAAG,CACtB,IAAM6J,EAAcT,EAAKS,YAAYD,EAAK5J,QAE1C,GADA2J,EAAaC,EAAKC,GACdxE,EAAOyE,gBAAgBH,EAAW,IACpC,MAEFC,EAAKzD,OAAO0D,EAAa,GAE3B,OAAOF,mCAIHjI,EAAOqI,GAGb,IAFA,IAAIhE,EAAO,CAAEzC,MAAO5B,GACdiI,EAAarJ,KAAK0J,kBACf7G,EAAI,EAAGA,EAAI4G,EAAO5G,IAAK,CAC9B,IAAMyG,EAAOD,EAAW5D,EAAKzC,OAC7ByC,EAAO,CACLF,OAAQE,EACRD,OAAQ8D,EAAK,GACbtG,MAAOsG,EAAK,IAGhB,OAAO7D,WCtCLkE,0LAUK,IAAAtJ,EAKHL,KAAKM,MAHPsJ,EAFKvJ,EAELuJ,KAFKC,EAAAxJ,EAGLyJ,kBAHK,IAAAD,KAAAhJ,EAAAR,EAILS,eAJK,IAAAD,EAIK,kBAAM,GAJXA,EAMDkJ,EAAQ,CACZC,gBAAe,cAAA/I,OAAgB2I,EAAhB,UAEjB,OACEvH,EAAAC,EAAAC,cAAA,UAAQuF,KAAM,SACZmC,MAAOL,EACP5I,UAAS,cAAAC,OAAgB2I,EAAhB,KAAA3I,OAAwB6I,EAAa,uBAAyB,IACvEI,SAAUJ,EACVhJ,QAAUgJ,EAAuB,kBAAM,GAAhBhJ,EACvBiJ,MAAOA,WAzBU7I,IAAMwB,YAAzBiH,EAEGQ,MAAQ,CAAC,QAAS,SAAU,SAAU,QAAS,QAAS,QA6BlDR,QC9BMS,0LAajB,IAPO,IAAA/J,EAKHL,KAAKM,MALF+J,EAAAhK,EAELyD,gBAFK,IAAAuG,EAEMnK,EAFNmK,EAGLjJ,EAHKf,EAGLe,MACA2C,EAJK1D,EAIL0D,UAEIrC,EAAO,GACJmB,EAAI,EAAGA,EAAIzB,EAAM1B,OAAQmD,GAAKiB,EAAStE,YAAa,CAE3D,IADA,IAAMoC,EAAO,GACJ0I,EAAIzH,EAAGyH,EAAIzH,EAAIiB,EAAStE,YAAa8K,IAC5C1I,EAAKQ,KACHC,EAAAC,EAAAC,cAAA,MAAIC,IAAK8H,EAAGtJ,UAAW+C,IAAcuG,EAAI,OAAS,IAChDjI,EAAAC,EAAAC,cAAA,QAAMvB,UAAS,eAAAC,OAAiBG,EAAMkJ,KAAOxG,EAAS7D,WAAa,qBAAuB,KACvFmB,EAAMkJ,MAKf5I,EAAKU,KAAKR,GAEZ,OACES,EAAAC,EAAAC,cAAA,SAAOvB,UAAU,mBACfqB,EAAAC,EAAAC,cAAA,aACGb,EAAKqH,IAAI,SAAAwB,GAAG,OAAIlI,EAAAC,EAAAC,cAAA,UAAKgI,cA7BarJ,IAAMwB,YCE9B8H,qBAKnB,SAAAA,EAAYlK,GAAO,IAAAwI,EAAA,OAAAhJ,OAAAC,EAAA,EAAAD,CAAAE,KAAAwK,IACjB1B,EAAAhJ,OAAA2K,EAAA,EAAA3K,CAAAE,KAAAF,OAAA4K,EAAA,EAAA5K,CAAA0K,GAAAG,KAAA3K,KAAMM,KACDsK,WAAa9B,EAAK8B,WAAWC,KAAhB/K,OAAAgL,EAAA,EAAAhL,CAAAgJ,IAClBA,EAAKiC,cAAgBjC,EAAKiC,cAAcF,KAAnB/K,OAAAgL,EAAA,EAAAhL,CAAAgJ,IACrBA,EAAK9F,MAAQ,CACX0C,MAAO,GALQoD,4EASN,IAAAkC,EAGPhL,KAAKgD,MADP0C,aAFS,IAAAsF,EAED,EAFCA,EAIPtF,EAAQ,GACV1F,KAAKiL,SAASnL,OAAOoL,OAAO,GAAIlL,KAAKgD,MAAO,CAC1C0C,MAAOA,EAAQ,6CAKL,IAAAyF,EAGVnL,KAAKgD,MADP0C,aAFY,IAAAyF,EAEJ,EAFIA,EAIVzF,EAAQ,EAAI1F,KAAKM,MAAMmI,QAAQ/I,QACjCM,KAAKiL,SAASnL,OAAOoL,OAAO,GAAIlL,KAAKgD,MAAO,CAC1C0C,MAAOA,EAAQ,sCAKZ,IAELA,EACE1F,KAAKgD,MADP0C,MAFKrF,EAOHL,KAAKM,MAPF+J,EAAAhK,EAKLyD,gBALK,IAAAuG,EAKMnK,EALNmK,EAAAe,EAAA/K,EAMLoI,eANK,IAAA2C,EAMK,GANLA,EAQD5F,EAASiD,EAAQ/C,GACvB,OACErD,EAAAC,EAAAC,cAAA,OAAKvB,UAAU,kBACbqB,EAAAC,EAAAC,cAAA,KAAGvB,UAAU,UACXqB,EAAAC,EAAAC,cAAA,QAAMvB,UAAU,QAAQwE,EAAO,GAAGsC,MAClCzF,EAAAC,EAAAC,cAAA,QAAMvB,UAAU,UAAhB,KAA4BwE,EAAO,GAAGzB,UAAtC,OAAqDyB,EAAO,GAAGrD,UAEjEE,EAAAC,EAAAC,cAAC8I,EAAD,CAAiBvH,SAAUA,EACzB1C,MAAOoE,EAAO,GACdzB,UAAWyB,EAAO,GAAGzB,YAEvB1B,EAAAC,EAAAC,cAAA,MAAIvB,UAAU,WACZqB,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAC+I,EAAD,CAAY1B,KAAK,aACf9I,QAASd,KAAK4K,WACdd,WAAsB,IAAVpE,KAEhBrD,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,QAAMvB,UAAU,SAAS0E,EAAQ,EAAjC,IAAqC+C,EAAQ/I,SACjD2C,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAC+I,EAAD,CAAY1B,KAAK,gBACf9I,QAASd,KAAK+K,cACdjB,WAAYpE,EAAQ,IAAM+C,EAAQ/I,mBAjEJwB,IAAMwB,YCD7B6I,0LAkBjB,IAVO,IAcHC,EAdGnL,EAMHL,KAAKM,MANF+J,EAAAhK,EAELyD,gBAFK,IAAAuG,EAEMnK,EAFNmK,EAAAoB,EAAApL,EAGLqL,cAHK,IAAAD,KAAAE,EAAAtL,EAILmH,gBAJK,IAAAmE,EAIM,GAJNA,EAAAC,EAAAvL,EAKL2E,aALK,IAAA4G,EAKG,GALHA,EAQDnD,EAAU,GACZhD,EAAO+B,EACJ/B,EAAKD,QACViD,EAAQvF,QAAQ,CAACuC,EAAKD,OAAQC,EAAKzC,QACnCyC,EAAOA,EAAKF,OAOd,OAJIkD,EAAQ/I,OAAS,IACnB8L,EAAiBnJ,EAAAC,EAAAC,cAACsJ,EAAD,CAAgB/H,SAAUA,EAAU2E,QAASA,KAI9DpG,EAAAC,EAAAC,cAAA,OAAKvB,UAAU,YACbqB,EAAAC,EAAAC,cAAA,qBAAuB,IAAXmJ,EAAkB,OAAS,QACpClE,EAAQ,YAAAvG,OAAewH,EAAQ/I,OAAvB,YAAAuB,OAAwC+D,EAAMvB,UAA9C,UAAAxC,OAAgE+D,EAAM8G,mBAAsB,IACtGN,UA/B6BtK,IAAMwB,YCwJ7BqJ,qBA5Ib,SAAAA,EAAYzL,GAAO,IAAAwI,EAAAhJ,OAAAC,EAAA,EAAAD,CAAAE,KAAA+L,GAAA,IAAA1B,GACjBvB,EAAAhJ,OAAA2K,EAAA,EAAA3K,CAAAE,KAAAF,OAAA4K,EAAA,EAAA5K,CAAAiM,GAAApB,KAAA3K,KAAMM,KAGGA,MADPwD,gBAHe,IAAAuG,EAGJnK,EAHImK,EAMjBvB,EAAKkD,WAAalD,EAAKkD,WAAWnB,KAAhB/K,OAAAgL,EAAA,EAAAhL,CAAAgJ,IAClBA,EAAKmD,aAAenD,EAAKmD,aAAapB,KAAlB/K,OAAAgL,EAAA,EAAAhL,CAAAgJ,IACpBA,EAAKoD,aAAepD,EAAKoD,aAAarB,KAAlB/K,OAAAgL,EAAA,EAAAhL,CAAAgJ,IACpBA,EAAKqD,YAAcrD,EAAKqD,YAAYtB,KAAjB/K,OAAAgL,EAAA,EAAAhL,CAAAgJ,IAEnBA,EAAKjE,QAAU,IAAIoE,EAAQnF,GAC3BgF,EAAKsD,QAAU,IAAIjD,EAAQrF,GAC3B,IAAM1C,EAAQ0H,EAAKjE,QAAQqE,cAbV,OAcjBJ,EAAK9F,MAAQ,CACX5B,MAAOA,EACPiL,UAAWvD,EAAKjE,QAAQwB,UAAUC,WAAWlF,GAC7CkL,UAAW,IAjBIxD,6EAqBL,IAAAyD,EAAAvM,KACNoB,EAAQpB,KAAK6E,QAAQqE,cAC3BlJ,KAAKiL,SAAS,SAACuB,EAAWlM,GAAZ,OAAsBR,OAAOoL,OAAO,GAAIqB,EAAKvJ,MAAO,CAChE5B,MAAOA,EACPiL,UAAWE,EAAK1H,QAAQwB,UAAUC,WAAWlF,GAC7CkL,UAAW,GACXZ,QAAQ,EACRe,OAAQ,4CAIDtK,GAAS,IAAAuK,EAAA1M,KAEhBqM,EACErM,KAAKgD,MADPqJ,UAFgBM,GAAA,EAAAC,GAAA,EAAAC,OAAAlN,EAAA,IAIlB,IAJkB,IAIlBmN,EAJkBjL,EAAA,eAAAkL,EAAAD,EAAAtM,MAIR0B,GAJQ8K,EAAAlN,OAAA+G,EAAA,EAAA/G,CAAAiN,EAAA,OAIFE,EAJED,EAAA,GAKhB,GAAI9K,EAAKC,UAAYA,EAMnB,OALAuK,EAAKzB,SAAS,SAACuB,EAAWlM,GAAZ,OAAsBR,OAAOoL,OAAO,GAAIwB,EAAK1J,MAAO,CAChE5B,MAAO6L,EACPZ,UAAWK,EAAK7H,QAAQwB,UAAUC,WAAW2G,GAC7CX,UAAWE,EAAUF,UAAUrL,OAAO,CAAC,CAACiB,EAAM+K,SAEhD,SAPJC,EAA8Bb,EAA9B9F,OAAAC,cAAAmG,GAAAG,EAAAI,EAAAzG,QAAAC,MAAAiG,GAAA,EAAyC,KAAAK,EAAA,aAAAnL,IAOrC,OAXc,MAAAsF,GAAAyF,GAAA,EAAAC,EAAA1F,EAAA,YAAAwF,GAAA,MAAAO,EAAA9F,QAAA8F,EAAA9F,SAAA,WAAAwF,EAAA,MAAAC,2CAyBlB,IATa,IAAAM,EAAAnN,KAAAoN,EAITpN,KAAKgD,MAFP5B,EAFWgM,EAEXhM,MACAkL,EAHWc,EAGXd,UAGIe,EAAWrN,KAAKoM,QAAQA,QAAQhL,EAAO,IAEvCkM,EAAc,GACX7H,EAAO4H,EAAU5H,EAAKD,OAAQC,EAAOA,EAAKF,OACjD+H,EAAYpK,QAAQ,CAACuC,EAAKD,OAAQC,EAAKzC,QAGzC,IAAMiK,EAAYI,EAASrK,MAC3BhD,KAAKiL,SAAS,SAACuB,EAAWlM,GAAZ,OAAsBR,OAAOoL,OAAO,GAAIiC,EAAKnK,MAAO,CAChE5B,MAAO6L,EACPZ,UAAWc,EAAKtI,QAAQwB,UAAUC,WAAW2G,GAC7CX,UAAWA,EAAUrL,OAAOqM,8CAIjB,IAAAC,EAAAvN,KAEXoB,EACEpB,KAAKgD,MADP5B,MAEFpB,KAAK6E,QAAQK,aAAe9D,EAC5B,IAAMqL,EAAS,IAAInF,EAAOtH,KAAK6E,SACzB6G,EAASe,EAAOA,SACtBzM,KAAKiL,SAAS,SAACuB,EAAWlM,GAAZ,OAAsBR,OAAOoL,OAAO,GAAIqC,EAAKvK,MAAO,CAChE0I,OAAQA,EACRe,OAAQA,uCAIH,IASHe,EAYAhG,EArBGiG,EAOHzN,KAAKgD,MAPF0K,EAAAD,EAEL/B,cAFK,IAAAgC,KAAAC,EAAAF,EAGLhB,cAHK,IAAAkB,EAGI,GAHJA,EAILvM,EAJKqM,EAILrM,MACAiL,EALKoB,EAKLpB,UACAC,EANKmB,EAMLnB,UAyBF,OArBIA,EAAU5M,OAAS,IACrB8N,EACEnL,EAAAC,EAAAC,cAAA,OAAKvB,UAAU,WACbqB,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAACsJ,EAAD,CACE/H,SAAU9D,KAAK6E,QAAQf,SACvB2E,QAAS6D,MAMbZ,IACFlE,EAAWnF,EAAAC,EAAAC,cAACqL,EAAD,CACT9J,SAAU9D,KAAK6E,QAAQf,SACvB4H,OAAQA,EACRlE,SAAUiF,EAAOjF,SACjBxC,MAAOyH,EAAOlF,SAASvC,SAKzB3C,EAAAC,EAAAC,cAAA,OAAKvB,UAAU,mBACbqB,EAAAC,EAAAC,cAACsL,EAAD,CACErO,YAAaQ,KAAK6E,QAAQf,SAAStE,YACnCK,SAAUG,KAAK6E,QAAQf,SAASjE,SAChCuB,MAAOA,EACPE,MAAO+K,EACP7K,OAAQxB,KAAKgM,aAEf3J,EAAAC,EAAAC,cAAA,MAAIvB,UAAU,WACZqB,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAC+I,EAAD,CAAY1B,KAAK,SAAS9I,QAASd,KAAKiM,gBAE1C5J,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAC+I,EAAD,CAAY1B,KAAK,OAAO9I,QAASd,KAAKkM,gBAExC7J,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAC+I,EAAD,CAAY1B,KAAK,QAAQ9I,QAASd,KAAKmM,gBAG1C3E,EACAgG,UA3IqBtM,IAAMwB,kBCIrBoL,MAXf,WACE,OACEzL,EAAAC,EAAAC,cAAA,OAAKvB,UAAU,OACbqB,EAAAC,EAAAC,cAAA,cACIrC,EAAgBV,YAAcU,EAAgBV,YAAe,EADjE,WAGA6C,EAAAC,EAAAC,cAACwL,EAAD,CAAiBjK,SAAU5D,MCAb8N,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjM,EAAAC,EAAAC,cAACgM,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d2b6a60c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export class Settings {\n  static DEFAULT_SIZE = 3;\n\n  constructor(columnCount = Settings.DEFAULT_SIZE, rowCount = columnCount) {\n    this.columnCount = columnCount;\n    this.rowCount = rowCount;\n    this.blankSpace = rowCount * columnCount;\n  }\n}\n\nexport const defaultSettings = new Settings();\n\n","import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport './Tile.css';\n\nconst noop = () => { };\n\nclass Tile extends React.Component {\n  static propTypes = {\n    value: PropTypes.number,\n    isBlank: PropTypes.bool,\n    isClickable: PropTypes.bool,\n    onClick: PropTypes.func\n  }\n  render() {\n    const {\n      value = -1,\n      isBlank = false,\n      isClickable = false,\n      onClick = noop\n    } = this.props;\n    return (\n      <span\n        className={`tile ${isClickable ? 'tile__clickable' : ''} ${isBlank ? 'tile__blank' : ''}`}\n        onClick={isClickable ? onClick : noop} >{value}</span>\n    );\n  }\n}\n\nexport default Tile;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Tile from './Tile';\nimport './TileGrid.css';\n\nclass TileGrid extends React.Component {\n  static propTypes = {\n    columnCount: PropTypes.number,\n    rowCount: PropTypes.number,\n    tiles: PropTypes.array,\n    moves: PropTypes.array,\n    onMove: PropTypes.func,\n  }\n  render() {\n    const {\n      columnCount,\n      rowCount,\n      tiles,\n      moves = [],\n      onMove = () => { }\n    } = this.props;\n\n    const blankTile = columnCount * rowCount;\n\n    const rows = [];\n    for (let irow = 0; irow < rowCount; irow++) {\n      const cols = [];\n      for (let icol = 0; icol < columnCount; icol++) {\n        const itile = (irow * rowCount) + icol;\n        const tileIsMoveable = moves.some(move => move[0].toIndex === itile);\n        cols.push(\n          <td key={itile}>\n            <Tile\n              value={tiles[itile]}\n              isBlank={tiles[itile] === blankTile}\n              isClickable={tileIsMoveable}\n              onClick={tileIsMoveable ? () => onMove(itile) : () => { }}></Tile>\n          </td>\n        );\n      }\n      rows.push(\n        <tr key={irow}>{cols}</tr>\n      );\n    }\n\n    return (\n      <table className=\"tileGrid\">\n        <tbody>\n          {rows}\n        </tbody>\n      </table>\n    );\n  }\n}\n\nexport default TileGrid;","\nexport function stateEquals(a, b) {\n  if (a.length !== b.length) {\n    return false;\n  }\n  for (let i = 0; i < a.length; i++) {\n    if (!(a[i] === b[i])) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport default class States {\n  constructor(states = []) {\n    this.states = states;\n  }\n\n  addLast(state) {\n    this.states.push(state);\n    return true;\n  }\n\n  addLastIfAbsent(state) {\n    if (this.contains(state)) {\n      return false;\n    }\n    this.states.push(state);\n    return true;\n  }\n\n  addFirst(state) {\n    this.states.unshift(state);\n    return true;\n  }\n\n  addFirstIfAbsent(state) {\n    if (this.contains(state)) {\n      return false;\n    }\n    this.states.unshift(state);\n    return true;\n  }\n\n  removeFirst() {\n    if (this.isEmpty()) {\n      throw new Error(\"No states remaining\");\n    }\n    return this.states.shift();\n  }\n\n  isEmpty() {\n    return this.states.length === 0;\n  }\n\n  size() {\n    return this.states.length;\n  }\n\n  findIndex(state) {\n    return this.states.findIndex(existing => stateEquals(state, existing));\n  }\n\n  contains(state) {\n    return this.states.some(existing => stateEquals(state, existing));\n  }\n}","import States, { stateEquals } from './States';\nimport { defaultSettings } from './Settings';\n\nexport class Stats {\n  constructor() {\n    this.nodeCount = 0;\n    this.expansionCount = 0;\n  }\n  incrementNodeCount() {\n    this.nodeCount++;\n  }\n  incrementExpansionCount() {\n    this.expansionCount++;\n  }\n  branchingFactor() {\n    return (this.nodeCount / this.expansionCount).toFixed(2);\n  }\n}\n\nexport class BreadthFirst {\n  init(problem) {\n    this.problem = problem;\n    this.stats = new Stats();\n    this.nodes = [{\n      state: problem.initialState,\n      depth: 0,\n      pathCost: 0\n    }];\n  }\n\n  hasNext() {\n    return this.nodes.length > 0;\n  }\n\n  next() {\n    if (!this.hasNext()) {\n      throw new Error(\"No candidate nodes remaining\")\n    }\n    return this.nodes.shift();\n  }\n\n  expand(node) {\n    this.stats.incrementExpansionCount();\n    for (let [action, state] of this.problem.successor.successors(node.state)) {\n      this.stats.incrementNodeCount();\n      this.nodes.push({\n        state: state,\n        parent: node,\n        action: action,\n        pathCost: 0,\n        depth: node.depth + 1\n      });\n    }\n  }\n}\n\nexport class DepthLimited {\n  constructor(maxDepth = 5) {\n    this.maxDepth = maxDepth;\n  }\n\n  init(problem) {\n    this.problem = problem;\n    this.stats = new Stats();\n    this.nodes = [{\n      state: problem.initialState,\n      depth: 0,\n      pathCost: 0\n    }];\n  }\n\n  hasNext() {\n    return this.nodes.length > 0;\n  }\n\n  next() {\n    if (!this.hasNext()) {\n      throw new Error(\"No candidate nodes remaining\")\n    }\n    return this.nodes.shift();\n  }\n\n  expand(node) {\n    if (node.depth < this.maxDepth) {\n      this.stats.incrementExpansionCount();\n      for (let [action, state] of this.problem.successor.successors(node.state)) {\n        this.stats.incrementNodeCount();\n        this.nodes.unshift({\n          state: state,\n          parent: node,\n          action: action,\n          pathCost: 0,\n          depth: node.depth + 1\n        });\n      }\n    }\n  }\n}\n\nexport class IterativeDeepening {\n  constructor(maxDepth = 15) {\n    this.maxDepth = maxDepth;\n  }\n\n  init(problem) {\n    this.problem = problem;\n    this.depth = 0;\n    this.closed = new States();\n    this.stats = new Stats();\n    this.root = {\n      state: problem.initialState,\n      depth: 0,\n      pathCost: 0\n    };\n    this.nodes = [this.root];\n  }\n\n  hasNext() {\n    return this.nodes.length > 0\n      || this.depth < this.maxDepth;\n  }\n\n  next() {\n    if (!this.hasNext()) {\n      throw new Error(\"No candidate nodes remaining\")\n    }\n\n    if (this.nodes.length === 0 && this.depth < this.maxDepth) {\n      this.nodes.push(this.root);\n      this.closed = new States();\n      this.depth++;\n    }\n\n    return this.nodes.shift();\n  }\n\n  expand(node) {\n    if (node.depth < this.depth) {\n      this.stats.incrementExpansionCount();\n      for (let [action, state] of this.problem.successor.successors(node.state)) {\n        if (this.closed.addLastIfAbsent(state)) {\n          this.stats.incrementNodeCount();\n          this.nodes.unshift({\n            state: state,\n            parent: node,\n            action: action,\n            pathCost: 0,\n            depth: node.depth + 1\n          });\n        }\n      }\n    }\n  }\n}\n\nexport class Heuristic {\n  constructor(settings = defaultSettings) {\n    this.settings = settings;\n  }\n\n  cityBlockDistance(fromIndex, toIndex) {\n    const positions = Math.abs(fromIndex - toIndex);\n    const vertical = Math.floor(positions / this.settings.columnCount);\n    const horizontal = positions % this.settings.columnCount;\n    return vertical + horizontal;\n  }\n\n  estimatedPathCost(state, goal) {\n    let distance = 0;\n    for (let goalIndex = 0; goalIndex < goal.length; goalIndex++) {\n      const stateIndex = state.indexOf(goal[goalIndex]);\n      distance += this.cityBlockDistance(stateIndex, goalIndex);\n    }\n    return distance;\n  }\n}\n\nexport function pathCostComparator(a, b) {\n  if (a.pathCost < b.pathCost) {\n    return -1;\n  }\n  if (a.pathCost > b.pathCost) {\n    return 1;\n  }\n  return 0;\n}\n\nexport class GreedyBestFirst {\n  init(problem) {\n    this.problem = problem;\n    this.heuristic = new Heuristic(problem.settings);\n    this.closed = new States();\n    this.stats = new Stats();\n    this.nodes = [{\n      state: problem.initialState,\n      depth: 0,\n      pathCost: this.heuristic.estimatedPathCost(problem.initialState, problem.goalState)\n    }];\n  }\n\n  hasNext() {\n    return this.nodes.length > 0;\n  }\n\n  next() {\n    if (!this.hasNext()) {\n      throw new Error(\"No candidate nodes remaining\")\n    }\n    return this.nodes.shift();\n  }\n\n  createNode(parent, state, action, depth) {\n    return {\n      parent: parent,\n      state: state,\n      action: action,\n      depth: depth,\n      pathCost: this.heuristic.estimatedPathCost(state, this.problem.goalState)\n    };\n  }\n\n  expand(node) {\n    this.stats.incrementExpansionCount();\n    for (let [action, state] of this.problem.successor.successors(node.state)) {\n      if (this.closed.addLastIfAbsent(state)) {\n        this.stats.incrementNodeCount();\n        this.nodes.unshift(this.createNode(node, state, action, node.depth + 1));\n      }\n    }\n    this.nodes.sort(pathCostComparator);\n  }\n}\n\nexport class AStar {\n  init(problem) {\n    this.problem = problem;\n    this.heuristic = new Heuristic(problem.settings);\n    this.closed = new States();\n    this.stats = new Stats();\n    this.nodes = [{\n      state: problem.initialState,\n      depth: 0,\n      pathCost: this.heuristic.estimatedPathCost(problem.initialState, problem.goalState)\n    }];\n  }\n\n  hasNext() {\n    return this.nodes.length > 0;\n  }\n\n  next() {\n    if (!this.hasNext()) {\n      throw new Error(\"No candidate nodes remaining\")\n    }\n    return this.nodes.shift();\n  }\n\n  createNode(parent, state, action, depth) {\n    return {\n      parent: parent,\n      state: state,\n      action: action,\n      depth: depth,\n      pathCost: depth + this.heuristic.estimatedPathCost(state, this.problem.goalState)\n    };\n  }\n\n  findIndex(state) {\n    return this.nodes.findIndex(node => stateEquals(node.state, state));\n  }\n\n  retainBest(index, other) {\n    const prev = this.nodes[index];\n    if (other.depth < prev.depth) {\n      this.nodes.splice(index, 1, other);\n    }\n  }\n\n  expand(node) {\n    this.closed.addLast(node.state);\n    this.stats.incrementExpansionCount();\n    for (let [action, state] of this.problem.successor.successors(node.state)) {\n      if (!this.closed.contains(state)) {\n        const child = this.createNode(node, state, action, node.depth + 1);\n        const prevIndex = this.findIndex(state);\n        if (prevIndex !== -1) {\n          this.retainBest(prevIndex, child);\n        }\n        else {\n          this.stats.incrementNodeCount();\n          this.nodes.push(child);\n        }\n      }\n    }\n    this.nodes.sort(pathCostComparator);\n  }\n}\n\nexport class Search {\n  constructor(problem, strategy = new AStar()) {\n    this.problem = problem;\n    this.strategy = strategy;\n    this.solution = null;\n  }\n  search() {\n    this.strategy.init(this.problem);\n    while (this.strategy.hasNext()) {\n      const node = this.strategy.next();\n      if (this.problem.goalTest(node.state)) {\n        this.solution = node;\n        return true;\n      }\n      this.strategy.expand(node);\n    }\n    return false;\n  }\n}","export const actionTypes = {\n  BLANK_UP: \"blank/up\",\n  BLANK_RIGHT: \"blank/right\",\n  BLANK_DOWN: \"blank/down\",\n  BLANK_LEFT: \"blank/left\"\n}\n\nexport class ActionFactory {\n  blankUp(fromIndex, toIndex) {\n    return {\n      type: actionTypes.BLANK_UP,\n      fromIndex: fromIndex,\n      toIndex: toIndex\n    };\n  }\n  blankRight(fromIndex, toIndex) {\n    return {\n      type: actionTypes.BLANK_RIGHT,\n      fromIndex: fromIndex,\n      toIndex: toIndex\n    };\n  }\n  blankDown(fromIndex, toIndex) {\n    return {\n      type: actionTypes.BLANK_DOWN,\n      fromIndex: fromIndex,\n      toIndex: toIndex\n    };\n  }\n  blankLeft(fromIndex, toIndex) {\n    return {\n      type: actionTypes.BLANK_LEFT,\n      fromIndex: fromIndex,\n      toIndex: toIndex\n    };\n  }\n}","import { actionTypes } from './Action';\n\nexport default class Reducer {\n  reduce(tiles, action) {\n    switch (action.type) {\n      case actionTypes.BLANK_UP:\n      case actionTypes.BLANK_RIGHT:\n      case actionTypes.BLANK_DOWN:\n      case actionTypes.BLANK_LEFT:\n        return this.moveTiles(tiles, action.fromIndex, action.toIndex);\n      default:\n        return tiles;\n    }\n  }\n\n  moveTiles(tiles, fromIndex, toIndex) {\n    const movedTiles = Array.from(tiles);\n    movedTiles[toIndex] = tiles[fromIndex];\n    movedTiles[fromIndex] = tiles[toIndex];\n    return movedTiles;\n  }\n}\n","import { defaultSettings } from './Settings';\nimport { ActionFactory } from './Action';\nimport Reducer from './Reducer';\n\nexport default class Successor {\n  constructor(settings = defaultSettings) {\n    this.settings = settings;\n    this.actionFactory = new ActionFactory();\n    this.reducer = new Reducer();\n  }\n\n  actions(tiles) {\n    const fromIndex = tiles.indexOf(this.settings.blankSpace);\n    if (fromIndex === -1) {\n      throw new Error(`Tiles is missing blank space ${tiles}`);\n    }\n    const fromRow = Math.floor(fromIndex / this.settings.columnCount);\n    const fromCol = fromIndex % this.settings.columnCount;\n\n    const actions = [];\n    if (fromRow > 0) {\n      const toIndex = fromIndex - this.settings.columnCount;\n      actions.push(this.actionFactory.blankUp(fromIndex, toIndex));\n    }\n    if (fromCol + 1 < this.settings.columnCount) {\n      const toIndex = fromIndex + 1;\n      actions.push(this.actionFactory.blankRight(fromIndex, toIndex));\n    }\n    if (fromRow + 1 < this.settings.rowCount) {\n      const toIndex = fromIndex + this.settings.columnCount;\n      actions.push(this.actionFactory.blankDown(fromIndex, toIndex));\n    }\n    if (fromCol > 0) {\n      const toIndex = fromIndex - 1;\n      actions.push(this.actionFactory.blankLeft(fromIndex, toIndex));\n    }\n\n    return actions;\n  }\n\n  successors(tiles) {\n    return this.actions(tiles).map(action =>\n      [action, this.reducer.reduce(tiles, action)]);\n  }\n}\n","import { defaultSettings } from './Settings';\nimport Successor from './Successor';\n\nexport default class Problem {\n  constructor(settings = defaultSettings) {\n    this.settings = settings;\n    this.successor = new Successor(settings);\n    this.goalState = this.createTiles();\n    this.initialState = this.createTiles();\n  }\n\n  createTiles() {\n    const tiles = [];\n    for (let i = 0; i < (this.settings.rowCount * this.settings.columnCount); i++) {\n      tiles.push(i + 1);\n    }\n    return tiles;\n  }\n\n  goalTest(tiles) {\n    for (let i = 0; i < this.goalState.length; i++) {\n      if (tiles[i] !== this.goalState[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}","import States from './States';\nimport { defaultSettings } from './Settings';\nimport Successor from './Successor';\n\nexport default class Shuffle {\n  constructor(settings = defaultSettings) {\n    this.settings = settings;\n    this.successor = new Successor(settings);\n  }\n\n  randomIndex(length) {\n    return Math.floor(Math.random() * length);\n  }\n\n  randomSuccessor() {\n    const closed = new States()\n    return (state) => {\n      let randomSucc;\n      const succ = this.successor.successors(state);\n      while (succ.length > 0) {\n        const randomIndex = this.randomIndex(succ.length);\n        randomSucc = succ[randomIndex];\n        if (closed.addLastIfAbsent(randomSucc[1])) {\n          break;\n        }\n        succ.splice(randomIndex, 1);\n      }\n      return randomSucc;\n    }\n  }\n\n  shuffle(tiles, times) {\n    let node = { state: tiles };\n    const randomSucc = this.randomSuccessor();\n    for (let i = 0; i < times; i++) {\n      const succ = randomSucc(node.state);\n      node = {\n        parent: node,\n        action: succ[0],\n        state: succ[1]\n      };\n    }\n    return node;\n  }\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './IconButton.css';\n\nclass IconButton extends React.Component {\n\n  static ICONS = ['check', 'delete', 'random', 'reset', 'close', 'info'];\n\n  static propTypes = {\n    icon: PropTypes.string.isRequired,\n    isDisabled: PropTypes.bool,\n    onClick: PropTypes.func\n  };\n\n  render() {\n    const {\n      icon,\n      isDisabled = false,\n      onClick = () => false\n    } = this.props;\n    const style = {\n      backgroundImage: `url(assets/${icon}.png)`\n    };\n    return (\n      <button type={'button'}\n        title={icon}\n        className={`iconButton ${icon} ${isDisabled ? 'iconButton__disabled' : ''}`}\n        disabled={isDisabled}\n        onClick={!isDisabled ? onClick : () => false}\n        style={style}>\n      </button>\n    );\n  }\n}\n\nexport default IconButton;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Settings, defaultSettings } from '../logic/Settings';\nimport './TileGridPreview.css';\n\nexport default class TileGridPreview extends React.Component {\n  static propTypes = {\n    settings: PropTypes.instanceOf(Settings),\n    tiles: PropTypes.arrayOf(PropTypes.number),\n    fromIndex: PropTypes.number\n  }\n  render() {\n    const {\n      settings = defaultSettings,\n      tiles,\n      fromIndex\n    } = this.props;\n    const rows = [];\n    for (let i = 0; i < tiles.length; i += settings.columnCount) {\n      const cols = []\n      for (let j = i; j < i + settings.columnCount; j++) {\n        cols.push(\n          <td key={j} className={fromIndex === j ? 'move' : ''}>\n            <span className={`tilePreview ${tiles[j] === settings.blankSpace ? 'tilePreview__blank' : ''}`}>\n              {tiles[j]}\n            </span>\n          </td>\n        );\n      }\n      rows.push(cols);\n    }\n    return (\n      <table className=\"tileGridPreview\">\n        <tbody>\n          {rows.map(row => <tr>{row}</tr>)}\n        </tbody>\n      </table>\n    );\n  }\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Settings, defaultSettings } from '../logic/Settings';\nimport IconButton from './IconButton';\nimport TileGridPreview from './TileGridPreview';\nimport './ActionSequence.css';\n\nexport default class ActionSequence extends React.Component {\n  static propTypes = {\n    settings: PropTypes.instanceOf(Settings),\n    actions: PropTypes.array\n  }\n  constructor(props) {\n    super(props);\n    this.handleBack = this.handleBack.bind(this);\n    this.handleForward = this.handleForward.bind(this);\n    this.state = {\n      index: 0\n    }\n  }\n\n  handleBack() {\n    const {\n      index = 0\n    } = this.state;\n    if (index > 0) {\n      this.setState(Object.assign({}, this.state, {\n        index: index - 1\n      }));\n    }\n  }\n\n  handleForward() {\n    const {\n      index = 0\n    } = this.state;\n    if (index + 1 < this.props.actions.length) {\n      this.setState(Object.assign({}, this.state, {\n        index: index + 1\n      }));\n    }\n  }\n\n  render() {\n    const {\n      index\n    } = this.state;\n    const {\n      settings = defaultSettings,\n      actions = []\n    } = this.props;\n    const action = actions[index];\n    return (\n      <div className=\"actionSequence\">\n        <p className=\"action\">\n          <span className=\"move\">{action[0].type}</span>\n          <span className=\"fromTo\">, {action[0].fromIndex} to {action[0].toIndex}</span>\n        </p>\n        <TileGridPreview settings={settings}\n          tiles={action[1]}\n          fromIndex={action[0].fromIndex}>\n        </TileGridPreview>\n        <ul className=\"buttons\">\n          <li>\n            <IconButton icon=\"arrow_back\"\n              onClick={this.handleBack}\n              isDisabled={index === 0}></IconButton>\n          </li>\n          <li><span className=\"index\">{index + 1}/{actions.length}</span></li>\n          <li>\n            <IconButton icon=\"arrow_forward\"\n              onClick={this.handleForward}\n              isDisabled={index + 1 === actions.length}></IconButton>\n          </li>\n        </ul>\n      </div>\n    );\n  }\n\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ActionSequence from './ActionSequence';\nimport { Settings, defaultSettings } from '../logic/Settings';\nimport './Solution.css';\n\nexport default class Solution extends React.Component {\n  static propTypes = {\n    settings: PropTypes.instanceOf(Settings),\n    solved: PropTypes.bool,\n    solution: PropTypes.object,\n    stats: PropTypes.object\n  }\n\n  render() {\n    const {\n      settings = defaultSettings,\n      solved = false,\n      solution = {},\n      stats = {}\n    } = this.props;\n\n    const actions = [];\n    let node = solution;\n    while (node.action) {\n      actions.unshift([node.action, node.state]);\n      node = node.parent;\n    }\n    let actionSequence;\n    if (actions.length > 0) {\n      actionSequence = <ActionSequence settings={settings} actions={actions}></ActionSequence>\n    }\n\n    return (\n      <div className=\"solution\">\n        <p>Solved: {solved === true ? 'true' : 'false'}\n          {solution ? `, Depth: ${actions.length}, Cost: ${stats.nodeCount}, BF: ${stats.branchingFactor()}` : ''}</p>\n        {actionSequence}\n      </div>\n    );\n  }\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TileGrid from '../components/TileGrid';\nimport { Settings, defaultSettings } from '../logic/Settings';\nimport { Search } from '../logic/Search';\nimport Problem from '../logic/Problem';\nimport Shuffle from '../logic/Shuffle';\nimport Solution from '../components/Solution';\nimport ActionSequence from '../components/ActionSequence';\nimport './SlidingTileGrid.css';\nimport '../components/IconButton';\nimport IconButton from '../components/IconButton';\n\nclass SlidingTileGrid extends React.Component {\n  static propTypes = {\n    settings: PropTypes.instanceOf(Settings)\n  }\n\n  constructor(props) {\n    super(props);\n    const {\n      settings = defaultSettings\n    } = this.props;\n\n    this.handleMove = this.handleMove.bind(this);\n    this.handleRandom = this.handleRandom.bind(this);\n    this.handleSearch = this.handleSearch.bind(this);\n    this.handleReset = this.handleReset.bind(this);\n\n    this.problem = new Problem(settings);\n    this.shuffle = new Shuffle(settings);\n    const tiles = this.problem.createTiles();\n    this.state = {\n      tiles: tiles,\n      nextMoves: this.problem.successor.successors(tiles),\n      prevMoves: []\n    };\n  }\n\n  handleReset() {\n    const tiles = this.problem.createTiles();\n    this.setState((prevState, props) => Object.assign({}, this.state, {\n      tiles: tiles,\n      nextMoves: this.problem.successor.successors(tiles),\n      prevMoves: [],\n      solved: false,\n      search: null\n    }));\n  }\n\n  handleMove(toIndex) {\n    const {\n      nextMoves\n    } = this.state;\n    for (let [move, nextTiles] of nextMoves) {\n      if (move.toIndex === toIndex) {\n        this.setState((prevState, props) => Object.assign({}, this.state, {\n          tiles: nextTiles,\n          nextMoves: this.problem.successor.successors(nextTiles),\n          prevMoves: prevState.prevMoves.concat([[move, nextTiles]])\n        }));\n        break;\n      }\n    }\n  }\n\n  handleRandom() {\n    const {\n      tiles,\n      prevMoves\n    } = this.state;\n\n    const shuffled = this.shuffle.shuffle(tiles, 15);\n\n    const randomMoves = [];\n    for (let node = shuffled; node.action; node = node.parent) {\n      randomMoves.unshift([node.action, node.state]);\n    }\n\n    const nextTiles = shuffled.state;\n    this.setState((prevState, props) => Object.assign({}, this.state, {\n      tiles: nextTiles,\n      nextMoves: this.problem.successor.successors(nextTiles),\n      prevMoves: prevMoves.concat(randomMoves)\n    }));\n  }\n\n  handleSearch() {\n    const {\n      tiles\n    } = this.state;\n    this.problem.initialState = tiles;\n    const search = new Search(this.problem);\n    const solved = search.search();\n    this.setState((prevState, props) => Object.assign({}, this.state, {\n      solved: solved,\n      search: search\n    }));\n  }\n\n  render() {\n    const {\n      solved = false,\n      search = {},\n      tiles,\n      nextMoves,\n      prevMoves\n    } = this.state;\n\n    let history;\n    if (prevMoves.length > 0) {\n      history =\n        <div className=\"history\">\n          <p>History</p>\n          <ActionSequence\n            settings={this.problem.settings}\n            actions={prevMoves}>\n          </ActionSequence>\n        </div>;\n    }\n\n    let solution;\n    if (solved) {\n      solution = <Solution\n        settings={this.problem.settings}\n        solved={solved}\n        solution={search.solution}\n        stats={search.strategy.stats}>\n      </Solution>;\n    }\n\n    return (\n      <div className=\"slidingTileGrid\">\n        <TileGrid\n          columnCount={this.problem.settings.columnCount}\n          rowCount={this.problem.settings.rowCount}\n          tiles={tiles}\n          moves={nextMoves}\n          onMove={this.handleMove}>\n        </TileGrid>\n        <ul className=\"buttons\">\n          <li>\n            <IconButton icon=\"random\" onClick={this.handleRandom}></IconButton>\n          </li>\n          <li>\n            <IconButton icon=\"info\" onClick={this.handleSearch}></IconButton>\n          </li>\n          <li>\n            <IconButton icon=\"reset\" onClick={this.handleReset}></IconButton>\n          </li>\n        </ul>\n        {solution}\n        {history}\n      </div>\n    );\n  }\n}\n\nexport default SlidingTileGrid;","import React from 'react';\nimport logo from './logo.svg';\nimport { defaultSettings } from './logic/Settings';\nimport SlidingTileGrid from './containers/SlidingTileGrid';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header>\n        {(defaultSettings.columnCount * defaultSettings.columnCount) - 1} Puzzle\n      </header>\n      <SlidingTileGrid settings={defaultSettings}></SlidingTileGrid>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}